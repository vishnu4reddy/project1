{"name": "test_decorator", "status": "skipped", "statusDetails": {"message": "XFAIL\n\nModuleNotFoundError: No module named 'mocker_over_mock'", "trace": "args = (<test_mock_fixture.TestDecoratorMocking object at 0x00000186BAD59BD0>,), keywargs = {}\n\n    @wraps(func)\n    def patched(*args, **keywargs):\n>       with self.decoration_helper(patched,\n                                    args,\n                                    keywargs) as (newargs, newkeywargs):\n\nC:\\Program Files\\Python310\\lib\\unittest\\mock.py:1366: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \nC:\\Program Files\\Python310\\lib\\contextlib.py:135: in __enter__\n    return next(self.gen)\nC:\\Program Files\\Python310\\lib\\unittest\\mock.py:1348: in decoration_helper\n    arg = exit_stack.enter_context(patching)\nC:\\Program Files\\Python310\\lib\\contextlib.py:492: in enter_context\n    result = _cm_type.__enter__(cm)\nC:\\Program Files\\Python310\\lib\\unittest\\mock.py:1421: in __enter__\n    self.target = self.getter()\nC:\\Program Files\\Python310\\lib\\unittest\\mock.py:1608: in <lambda>\n    getter = lambda: _importer(target)\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\ntarget = 'mocker_over_mock'\n\n    def _importer(target):\n        components = target.split('.')\n        import_path = components.pop(0)\n>       thing = __import__(import_path)\nE       ModuleNotFoundError: No module named 'mocker_over_mock'\n\nC:\\Program Files\\Python310\\lib\\unittest\\mock.py:1247: ModuleNotFoundError"}, "start": 1678268172661, "stop": 1678268172661, "uuid": "a0a5629f-fdb8-4cd2-9b5d-3f10b7c04527", "historyId": "fb5d2c003076b45873a4217fd1733f58", "testCaseId": "5e38b0c4b2c64b80ad765a642cce62c2", "fullName": "test_mock_fixture.TestDecoratorMocking#test_decorator", "labels": [{"name": "tag", "value": "@pytest.mark.xfail(strict=True, msg='We want this test to fail.')"}, {"name": "suite", "value": "test_mock_fixture"}, {"name": "subSuite", "value": "TestDecoratorMocking"}, {"name": "host", "value": "BAN-LAP-VREDDY"}, {"name": "thread", "value": "7936-MainThread"}, {"name": "framework", "value": "pytest"}, {"name": "language", "value": "cpython3"}, {"name": "package", "value": "test_mock_fixture"}]}